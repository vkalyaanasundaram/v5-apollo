import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { client } from '../../lib/apollo';
import { gql, useLazyQuery, useQuery } from "@apollo/client";
import Blog from "../../components/Blog"
import RecentPost from "../../components/RecentPost"
import Header from "../../components/Header"
import Footer from "../../components/Footer"
import PostImage from "../../components/PostImage"
import Heading from "../../components/Heading"
import Category from "../../components/Category"
import styles from '../../styles/pages/posts.module.scss';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';

// const LAUNCH_QUERY = gql`
//   query PostQry($first: Int, $query: String) {
//         posts(first: 99, where: {search: "business"}) {
//             nodes {
//                 content
//                 title
//                 link
//                 featuredImage {
//                     node {
//                         sourceUrl
//                     }
//                 }
//                 uri
//             }
//         }
//     }

// `;



export default function SearchResult(
    heading,
    id,
    postTitleLevel,
    postMainTitleLevel,
    readMoreText = "Read more",
    intro) {
    const router = useRouter();
    const keyword = router?.query?.keyword;

    const LAUNCH_QUERY = gql`
   {
        posts(first: 99, where: {search: "${keyword}"}) {
            nodes {
                content
                title
                link
                slug
                excerpt
                featuredImage {
                    node {
                        sourceUrl
                    }
                }
                uri
            }
        }
        categories(first: 99) {
            nodes {
              uri
              name
              slug
            }
        }
    }
  
`;

    const data = useQuery(LAUNCH_QUERY)
    const posts = data?.data?.posts?.nodes;
    const categories = data?.data?.categories;
    const [loading, setLoading] = useState(false);

    const searchPost = (event) => {
        router.push(`./SearchResult?keyword=${event}`)
    }

    return (
        <>
            <Header />
            <div className={styles.container}>
                <Head>
                    <title>Create Next App</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <main className="content content-page">
                    <div className="blogWrap">
                        <div className="blogContainer">
                            <div className="grid grid-cols-1 gap-4 my-10 mx-2" >
                                <input
                                    type="text"
                                    name="searchIco"
                                    id="searchIco"
                                    placeholder="Search"
                                    className="border-2 border-gray-300 p-2 w-full"
                                    value={router?.query?.keyword}
                                    onChange={(e) => searchPost(e.target.value)}
                                />
                                {posts?.map((post, key) => (
                                    <div key={key ?? ""} id={`post-${post.id}`}>
                                        <div>
                                            <PostImage imageSrcUrl={post?.featuredImage?.node?.sourceUrl} />
                                            <Heading level={postTitleLevel} className={styles.title}>
                                                <Link href={`/blog/${post.slug}`}>
                                                    <a>{post.title}</a>
                                                </Link>
                                            </Heading>
                                            <div
                                                className={styles.excerpt}
                                                dangerouslySetInnerHTML={{ __html: post.excerpt ?? "" }}
                                            />
                                            <Link href={`/blog/${post.slug}`}>
                                                <a aria-label={`Read more about ${post.title || "the post"}`}>
                                                    {readMoreText}
                                                </a>
                                            </Link>
                                        </div>
                                    </div>
                                )
                                )}
                            </div>
                        </div>
                        <div className="blogNav">
                            <RecentPost posts={posts} />
                            <Category categories={categories?.nodes} />
                        </div>
                    </div>
                </main>
                <Footer />
            </div>
        </>
    )
}
